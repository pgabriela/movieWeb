#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('movieweb:server');
var http = require('http');
var mongoose = require('mongoose');
var movieDB = require('../models/movie');
var MoviesSaved = require('../models/MovieSaved');
var bc_conf = require('../server_side_blockchain_settings');
var Web3 = require('web3');
var web3 = new Web3(new Web3.providers.HttpProvider(bc_conf.node_url));

mongoose.connect('mongodb://localhost/dbusers');
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function(){
  console.log('Connected to MongoDB');
});

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
io.on('connection', function(socket){
    console.log("a user connected");
    socket.on('queryMovies', function(data){
        movieDB.find({}, function(err, movies){
            socket.emit('movieList', movies);
        })
    });
    socket.on('searchMoviesToBeDeleted', function(data){
        MoviesSaved.find({ title: new RegExp(data, 'i') }, function(err, movies){
            socket.emit('movieList', movies);
        })
    });
    socket.on('fetchReviews', function(data){
        var theContract = new web3.eth.Contract(bc_conf.contract_abi, bc_conf.contract_addr);
        theContract.methods.getMovieReviewCount(data.movieAddr, data.movieTitle).call({}, function(eRC, rRC){
            if(eRC) return;
            for(let c=0; c<rRC; c++){
                theContract.methods.getMovieReviewRatingAtIndex(data.movieAddr, data.movieTitle, c).call({}, function(eRR, rRR){
                    if(eRR) return;
                    theContract.methods.getMovieReviewCommentAtIndex(data.movieAddr, data.movieTitle, c).call({}, function(eRCom, rRCom){
                        if(eRCom) return;
                        theContract.methods.getMovieReviewReviewerNameAtIndex(data.movieAddr, data.movieTitle, c).call({}, function(eRN, rRN){
                            if(eRN) return;
                            socket.emit('oneReview', { rRR: rRR, rRCom: rRCom, rRN: rRN });
                        });
                    });
                });
            }
        });
    });
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
